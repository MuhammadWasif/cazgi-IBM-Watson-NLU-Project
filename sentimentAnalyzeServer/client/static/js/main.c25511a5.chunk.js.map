{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","JSON","stringify","this","props","emotions","className","Object","entries","map","e","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","fetch","then","response","text","data","output","style","color","fontSize","sendForEmotionAnalysis","json","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8QAwBeA,E,4JApBb,WACE,OACE,gCACGC,KAAKC,UAAUC,KAAKC,MAAMC,UAC3B,uBAAOC,UAAU,uBAAjB,SACE,gCACGC,OAAOC,QAAQL,KAAKC,MAAMC,UAAUI,KAAI,SAAUC,GACjD,OACE,+BACE,6BAAKA,EAAE,KACP,6BAAKA,EAAE,sB,GAXEC,IAAMC,WC8GlBC,E,4MA3GbC,MAAQ,CACNC,UAAW,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cAC3CC,KAAM,OACNC,gBAAiB,GACjBC,WAAW,G,EAGbC,eAAiB,WACfC,SAASC,eAAe,aAAaC,MAAQ,GACrB,QAApB,EAAKX,MAAMK,MACb,EAAKO,SAAS,CACZX,UAAW,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cAC3CC,KAAM,OACNC,gBAAiB,GACjBC,WAAW,K,EAKjBM,cAAgB,WACdJ,SAASC,eAAe,aAAaC,MAAQ,GACrB,SAApB,EAAKX,MAAMK,MACb,EAAKO,SAAS,CACZX,UAAW,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cAC3CC,KAAM,MACNC,gBAAiB,GACjBC,WAAW,K,EAKjBO,yBAA2B,WACzB,EAAKF,SAAS,CAAEL,WAAW,IAC3B,IAAIQ,EAAM,IAGRA,EADsB,QAApB,EAAKf,MAAMK,KAEXU,EACA,sBACAN,SAASC,eAAe,aAAaC,MAGrCI,EACA,wBACAN,SAASC,eAAe,aAAaC,MAEzCK,MAAMD,GAAKE,MAAK,SAACC,GACfA,EAASC,OAAOF,MAAK,SAACG,GACpB,EAAKR,SAAS,CAAEN,gBAAiBc,IACjC,IAAIC,EAASD,EAEXC,EADW,aAATD,EACO,qBAAKE,MAAO,CAAEC,MAAO,QAASC,SAAU,IAAxC,SAA+CJ,IACtC,aAATA,EACA,qBAAKE,MAAO,CAAEC,MAAO,MAAOC,SAAU,IAAtC,SAA6CJ,IAE7C,qBAAKE,MAAO,CAAEC,MAAO,SAAUC,SAAU,IAAzC,SAAgDJ,IAE3D,EAAKR,SAAS,CAAEN,gBAAiBe,W,EAKvCI,uBAAyB,WACvB,EAAKb,SAAS,CAAEL,WAAW,IAC3B,IAAIQ,EAAM,IAERA,EADsB,QAApB,EAAKf,MAAMK,KAEXU,EAAM,oBAAsBN,SAASC,eAAe,aAAaC,MAGjEI,EACA,uBACAN,SAASC,eAAe,aAAaC,MAEzCK,MAAMD,GAAKE,MAAK,SAACC,GACfA,EAASQ,OAAOT,MAAK,SAACG,GACpB,EAAKR,SAAS,CAAEN,gBAAiB,cAAC,EAAD,CAAcf,SAAU6B,a,4CAK/D,WACE,OACE,sBAAK5B,UAAU,MAAf,UACE,wBAAQA,UAAU,eAAemC,QAAStC,KAAKmB,eAA/C,kBAGA,wBAAQhB,UAAU,eAAemC,QAAStC,KAAKwB,cAA/C,iBAGA,uBACA,uBACCxB,KAAKW,MAAMC,UACZ,uBACA,wBAAQT,UAAU,cAAcmC,QAAStC,KAAKyB,yBAA9C,+BAGA,wBAAQtB,UAAU,cAAcmC,QAAStC,KAAKoC,uBAA9C,6BAGA,uBACCpC,KAAKW,MAAMM,uB,GAtGFT,IAAMC,WCOT8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAASC,eAAe,SAM1BkB,K","file":"static/js/main.c25511a5.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n  render() {\n    return (\n      <div>\n        {JSON.stringify(this.props.emotions)}\n        <table className='table table-bordered'>\n          <tbody>\n            {Object.entries(this.props.emotions).map(function (e) {\n              return (\n                <tr>\n                  <td>{e[0]}</td>\n                  <td>{e[1]}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\n\nclass App extends React.Component {\n  state = {\n    innercomp: <textarea rows='4' cols='50' id='textinput' />,\n    mode: 'text',\n    sentimentOutput: [],\n    sentiment: true,\n  };\n\n  renderTextArea = () => {\n    document.getElementById('textinput').value = '';\n    if (this.state.mode === 'url') {\n      this.setState({\n        innercomp: <textarea rows='4' cols='50' id='textinput' />,\n        mode: 'text',\n        sentimentOutput: [],\n        sentiment: true,\n      });\n    }\n  };\n\n  renderTextBox = () => {\n    document.getElementById('textinput').value = '';\n    if (this.state.mode === 'text') {\n      this.setState({\n        innercomp: <textarea rows='1' cols='50' id='textinput' />,\n        mode: 'url',\n        sentimentOutput: [],\n        sentiment: true,\n      });\n    }\n  };\n\n  sendForSentimentAnalysis = () => {\n    this.setState({ sentiment: true });\n    let url = '.';\n\n    if (this.state.mode === 'url') {\n      url =\n        url +\n        '/url/sentiment?url=' +\n        document.getElementById('textinput').value;\n    } else {\n      url =\n        url +\n        '/text/sentiment?text=' +\n        document.getElementById('textinput').value;\n    }\n    fetch(url).then((response) => {\n      response.text().then((data) => {\n        this.setState({ sentimentOutput: data });\n        let output = data;\n        if (data === 'positive') {\n          output = <div style={{ color: 'green', fontSize: 20 }}>{data}</div>;\n        } else if (data === 'negative') {\n          output = <div style={{ color: 'red', fontSize: 20 }}>{data}</div>;\n        } else {\n          output = <div style={{ color: 'yellow', fontSize: 20 }}>{data}</div>;\n        }\n        this.setState({ sentimentOutput: output });\n      });\n    });\n  };\n\n  sendForEmotionAnalysis = () => {\n    this.setState({ sentiment: false });\n    let url = '.';\n    if (this.state.mode === 'url') {\n      url =\n        url + '/url/emotion?url=' + document.getElementById('textinput').value;\n    } else {\n      url =\n        url +\n        '/text/emotion/?text=' +\n        document.getElementById('textinput').value;\n    }\n    fetch(url).then((response) => {\n      response.json().then((data) => {\n        this.setState({ sentimentOutput: <EmotionTable emotions={data} /> });\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <button className='btn btn-info' onClick={this.renderTextArea}>\n          Text\n        </button>\n        <button className='btn btn-dark' onClick={this.renderTextBox}>\n          URL\n        </button>\n        <br />\n        <br />\n        {this.state.innercomp}\n        <br />\n        <button className='btn-primary' onClick={this.sendForSentimentAnalysis}>\n          Analyze Sentiment\n        </button>\n        <button className='btn-primary' onClick={this.sendForEmotionAnalysis}>\n          Analyze Emotion\n        </button>\n        <br />\n        {this.state.sentimentOutput}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}